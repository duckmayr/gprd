// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// gprd
Rcpp::List gprd(const arma::vec& outcome, const arma::mat& training_cases, const arma::mat& test_cases, const arma::mat& B, const arma::vec& b, const double cov_sigma, const arma::vec& cov_ell, const double obs_sigma);
RcppExport SEXP _gprd_gprd(SEXP outcomeSEXP, SEXP training_casesSEXP, SEXP test_casesSEXP, SEXP BSEXP, SEXP bSEXP, SEXP cov_sigmaSEXP, SEXP cov_ellSEXP, SEXP obs_sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type outcome(outcomeSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type training_cases(training_casesSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type test_cases(test_casesSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type B(BSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type b(bSEXP);
    Rcpp::traits::input_parameter< const double >::type cov_sigma(cov_sigmaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type cov_ell(cov_ellSEXP);
    Rcpp::traits::input_parameter< const double >::type obs_sigma(obs_sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(gprd(outcome, training_cases, test_cases, B, b, cov_sigma, cov_ell, obs_sigma));
    return rcpp_result_gen;
END_RCPP
}
// squared_distance
arma::cube squared_distance(const arma::mat& x);
RcppExport SEXP _gprd_squared_distance(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(squared_distance(x));
    return rcpp_result_gen;
END_RCPP
}
// gradient
arma::vec gradient(const arma::vec& hypers, const arma::cube& K0, const arma::mat& Q0, const arma::vec& M);
RcppExport SEXP _gprd_gradient(SEXP hypersSEXP, SEXP K0SEXP, SEXP Q0SEXP, SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type hypers(hypersSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type K0(K0SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Q0(Q0SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(gradient(hypers, K0, Q0, M));
    return rcpp_result_gen;
END_RCPP
}
// log_marginal_likelihood
double log_marginal_likelihood(const arma::vec& hypers, const arma::cube& K0, const arma::mat& Q0, const arma::vec& M);
RcppExport SEXP _gprd_log_marginal_likelihood(SEXP hypersSEXP, SEXP K0SEXP, SEXP Q0SEXP, SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type hypers(hypersSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type K0(K0SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Q0(Q0SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(log_marginal_likelihood(hypers, K0, Q0, M));
    return rcpp_result_gen;
END_RCPP
}
// predict
Rcpp::List predict(const arma::vec& outcome, const arma::mat& training_cases, const arma::mat& test_cases, const arma::mat& B, const arma::vec& b, const double cov_sigma, const arma::vec& cov_ell, const double obs_sigma, const arma::mat& Ky, const arma::mat& Ky_i, const arma::vec& beta_bar);
RcppExport SEXP _gprd_predict(SEXP outcomeSEXP, SEXP training_casesSEXP, SEXP test_casesSEXP, SEXP BSEXP, SEXP bSEXP, SEXP cov_sigmaSEXP, SEXP cov_ellSEXP, SEXP obs_sigmaSEXP, SEXP KySEXP, SEXP Ky_iSEXP, SEXP beta_barSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type outcome(outcomeSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type training_cases(training_casesSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type test_cases(test_casesSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type B(BSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type b(bSEXP);
    Rcpp::traits::input_parameter< const double >::type cov_sigma(cov_sigmaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type cov_ell(cov_ellSEXP);
    Rcpp::traits::input_parameter< const double >::type obs_sigma(obs_sigmaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Ky(KySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Ky_i(Ky_iSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta_bar(beta_barSEXP);
    rcpp_result_gen = Rcpp::wrap(predict(outcome, training_cases, test_cases, B, b, cov_sigma, cov_ell, obs_sigma, Ky, Ky_i, beta_bar));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_gprd_gprd", (DL_FUNC) &_gprd_gprd, 8},
    {"_gprd_squared_distance", (DL_FUNC) &_gprd_squared_distance, 1},
    {"_gprd_gradient", (DL_FUNC) &_gprd_gradient, 4},
    {"_gprd_log_marginal_likelihood", (DL_FUNC) &_gprd_log_marginal_likelihood, 4},
    {"_gprd_predict", (DL_FUNC) &_gprd_predict, 11},
    {NULL, NULL, 0}
};

RcppExport void R_init_gprd(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
